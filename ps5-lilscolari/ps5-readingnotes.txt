Chapter 4:
 - Encapsulation: rapping a piece of code up in a function
 - Encapsulation attaches a name to the code
 - Call function instead of reuse code
 - Generalization: adding a parameter to a function
 - Keyword Arguments: include parameter names as "key-words"
 - Interface: summary of how function is used
 - Refactoring: rearranging a program to improve interfaces and facilitate code re-use
 - Development plan: process for writing programs
 - Process for development plan is:
1. Start by writing a small program with no function definitions.
2. Once you get the program working, identify a coherent piece of it, encapsulate the
piece in a function and give it a name.
3. Generalize the function by adding appropriate parameters.
4. Repeat steps 1–3 until you have a set of working functions. Copy and paste working
code to avoid retyping (and re-debugging).
5. Look for opportunities to improve the program by refactoring. For example, if you
have similar code in several places, consider factoring it into an appropriately general
function.
 - Docstring: A string at the beginning of a function that explains the interface
 - All docstrings are triple-quoted strings (multiline strings)
 - Precondition: A requirement that should be satisfied by the caller before a function starts
 - Postcondition: A requirement that should be satisfied by the function before it ends

Sections 5.8-5.10:
 - Functions can call another function
 - Functions can call itself
 - Recursive: a function that calls itself
 - Recursion: the process of calling the function that is currently executing
 - Return Statement: exits the function
 - Every time a function is called, Python creates a frame to contain the function’s local
variables and parameters. For a recursive function, there might be more than one frame on
the stack at the same time
 - Base Case: a conditional branch in a recursive function that does not make a recursive call
 - Infinite Recursion: a recursion that does not have a base case, or never reaches it. Eventually, an infinite recursion causes a runtime error

Sections 6.5-6.9:
 - Guardian: a programming pattern that uses a conditional statement to check for and handle circumstances that might cause an error
 - Break large programs into smaller segments to make debugging easier
 - Add a print statement before return statements to know what value you are returning